// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  phone         String?
  address       String?
  bio           String?   @db.Text
  dateOfBirth   DateTime?
  gender        String?
  occupation    String?
  company       String?
  website       String?
  socialLinks   Json?     // Store social media links as JSON
  preferences   Json?     // Store user preferences as JSON
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  events        Event[]   @relation("EventOrganizer")
  reviews       Review[]
  wishlist      Event[]   @relation("UserWishlist")
  notifications Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  price       Float
  capacity    Int
  imageUrl    String?
  views       Int       @default(0)
  isPublished Boolean   @default(false)
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  organizerId String
  organizer   User      @relation("EventOrganizer", fields: [organizerId], references: [id])
  bookings    Booking[]
  reviews     Review[]
  wishlistedBy User[]   @relation("UserWishlist")
}

model Booking {
  id        String        @id @default(cuid())
  userId    String
  eventId   String
  quantity  Int          @default(1)
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  event     Event         @relation(fields: [eventId], references: [id])
  payment   Payment?

  @@unique([userId, eventId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  events      Event[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      NotificationType
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String   @id @default(cuid())
  bookingId     String   @unique
  amount        Float
  status        String
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  booking       Booking  @relation(fields: [bookingId], references: [id])
}

model Settings {
  id                String   @id @default(cuid())
  siteName          String?
  siteDescription   String?
  contactEmail      String?
  contactPhone      String?
  midtransClientKey String?
  midtransServerKey String?
  facebookUrl       String?
  twitterUrl        String?
  instagramUrl      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  PAID
  CANCELLED
  COMPLETED
}

enum NotificationType {
  BOOKING_UPDATE
  EVENT_REMINDER
  SYSTEM
} 